ZPA_CL
| extend ParsedLog = parse_json(Message)
| where isnotnull(ParsedLog.AssistantID)
| project
    LogTimestamp = todatetime(ParsedLog.LogTimestamp),
    Customer = tostring(ParsedLog.Customer),
    ConnectionID = tostring(ParsedLog.ConnectionID),
    UserID = tostring(ParsedLog.UserID),
    AssistantID = tostring(ParsedLog.AssistantID),
    ExchangeSequenceIndex = toint(ParsedLog.ExchangeSequenceIndex),
    TimestampRequestReceiveStart = todatetime(ParsedLog.TimestampRequestReceiveStart),
    TimestampRequestReceiveHeaderFinish = todatetime(ParsedLog.TimestampRequestReceiveHeaderFinish),
    TimestampRequestReceiveFinish = todatetime(ParsedLog.TimestampRequestReceiveFinish),
    TimestampRequestTransmitStart = todatetime(ParsedLog.TimestampRequestTransmitStart),
    TimestampRequestTransmitFinish = todatetime(ParsedLog.TimestampRequestTransmitFinish),
    TimestampResponseReceiveFinish = todatetime(ParsedLog.TimestampResponseReceiveFinish),
    TimestampResponseTransmitStart = todatetime(ParsedLog.TimestampResponseTransmitStart),
    TimestampResponseTransmitFinish = todatetime(ParsedLog.TimestampResponseTransmitFinish),
    TotalTimeRequestReceive = toint(ParsedLog.TotalTimeRequestReceive),
    TotalTimeRequestTransmit = toint(ParsedLog.TotalTimeRequestTransmit),
    TotalTimeResponseReceive = toint(ParsedLog.TotalTimeResponseReceive),
    TotalTimeResponseTransmit = toint(ParsedLog.TotalTimeResponseTransmit),
    Domain = tostring(ParsedLog.Domain),
    Method = tostring(ParsedLog.Method),
    Protocol = tostring(ParsedLog.Protocol),
    ProtocolVersion = tostring(ParsedLog.ProtocolVersion),
    ContentType = tostring(ParsedLog.ContentType),
    ContentEncoding = tostring(ParsedLog.ContentEncoding),
    TransferEncoding = tostring(ParsedLog.TransferEncoding),
    Host = tostring(ParsedLog.Host),
    Destination = tostring(ParsedLog.Destination),
    OriginDomain = tostring(ParsedLog.OriginDomain),
    URL = tostring(ParsedLog.URL),
    UserAgent = tostring(ParsedLog.UserAgent),
    HTTPError = tostring(ParsedLog.HTTPError),
    ClientPublicIp = tostring(ParsedLog.ClientPublicIp),
    ClientPort = toint(ParsedLog.ClientPort),
    UpgradeHeaderPresent = toint(ParsedLog.UpgradeHeaderPresent),
    StatusCode = toint(ParsedLog.StatusCode),
    RequestHdrSize = toint(ParsedLog.RequestHdrSize),
    ResponseHdrSize = toint(ParsedLog.ResponseHdrSize),
    RequestBodySize = toint(ParsedLog.RequestBodySize),
    ResponseBodySize = toint(ParsedLog.ResponseBodySize),
    Application = toint(ParsedLog.Application),
    ApplicationGroup = toint(ParsedLog.ApplicationGroup),
    InspectionPolicy = toint(ParsedLog.InspectionPolicy),
    InspectionProfile = toint(ParsedLog.InspectionProfile),
    ParanoiaLevel = toint(ParsedLog.ParanoiaLevel),
    InspectionControlsHitCount = toint(ParsedLog.InspectionControlsHitCount),
    InspectionRuleProcessingTime = toint(ParsedLog.InspectionRuleProcessingTime),
    InspectionReqHeadersProcessingTime = toint(ParsedLog.InspectionReqHeadersProcessingTime),
    InspectionReqBodyProcessingTime = toint(ParsedLog.InspectionReqBodyProcessingTime),
    InspectionRespHeadersProcessingTime = toint(ParsedLog.InspectionRespHeadersProcessingTime),
    InspectionRespBodyProcessingTime = toint(ParsedLog.InspectionRespBodyProcessingTime),
    CertificateId = toint(ParsedLog.CertificateId),
    DoubleEncryption = toint(ParsedLog.DoubleEncryption),
    SSLInspection = toint(ParsedLog.SSLInspection),
    TotalBytesProcessed = toint(ParsedLog.TotalBytesProcessed),
    Message = Message