ZPA_CL
| extend ParsedData = parse_json(Message)
| where isnotnull(ParsedData.PolicyProcessingTime) 
| project
    EventVendor="Zscaler",
    EventProduct="Private Access",
    LogTimestamp = todatetime(ParsedData.LogTimestamp),
    Customer = tostring(ParsedData.Customer),
    SessionID = tostring(ParsedData.SessionID),
    ConnectionID = tostring(ParsedData.ConnectionID),
    InternalReason = tostring(ParsedData.InternalReason),
    ConnectionStatus = tostring(ParsedData.ConnectionStatus),
    IPProtocol = toint(ParsedData.IPProtocol),
    DoubleEncryption = toint(ParsedData.DoubleEncryption),
    Username = tostring(ParsedData.Username),
    ServicePort = toint(ParsedData.ServicePort),
    ClientPublicIP = tostring(ParsedData.ClientPublicIP),
    ClientPrivateIP = tostring(ParsedData.ClientPrivateIP),
    ClientLatitude = todouble(ParsedData.ClientLatitude),
    ClientLongitude = todouble(ParsedData.ClientLongitude),
    ClientCountryCode = tostring(ParsedData.ClientCountryCode),
    ClientZEN = tostring(ParsedData.ClientZEN),
    Policy = tostring(ParsedData.Policy),
    Connector = tostring(ParsedData.Connector),
    ConnectorZEN = tostring(ParsedData.ConnectorZEN),
    ConnectorIP = tostring(ParsedData.ConnectorIP),
    ConnectorPort = toint(ParsedData.ConnectorPort),
    Host = tostring(ParsedData.Host),
    Application = tostring(ParsedData.Application),
    AppGroup = tostring(ParsedData.AppGroup),
    Server = tostring(ParsedData.Server),
    ServerIP = tostring(ParsedData.ServerIP),
    ServerPort = toint(ParsedData.ServerPort),
    PolicyProcessingTime = toint(ParsedData.PolicyProcessingTime),
    ServerSetupTime = toint(ParsedData.ServerSetupTime),
    TimestampConnectionStart = todatetime(ParsedData.TimestampConnectionStart),
    TimestampConnectionEnd = todatetime(ParsedData.TimestampConnectionEnd),
    TimestampCATx = todatetime(ParsedData.TimestampCATx),
    TimestampCARx = todatetime(ParsedData.TimestampCARx),
    TimestampAppLearnStart = todatetime(ParsedData.TimestampAppLearnStart),
    TimestampZENFirstRxClient = todatetime(ParsedData.TimestampZENFirstRxClient),
    TimestampZENFirstTxClient = todatetime(ParsedData.TimestampZENFirstTxClient),
    TimestampZENLastRxClient = todatetime(ParsedData.TimestampZENLastRxClient),
    TimestampZENLastTxClient = todatetime(ParsedData.TimestampZENLastTxClient),
    TimestampConnectorZENSetupComplete = todatetime(ParsedData.TimestampConnectorZENSetupComplete),
    TimestampZENFirstRxConnector = todatetime(ParsedData.TimestampZENFirstRxConnector),
    TimestampZENFirstTxConnector = todatetime(ParsedData.TimestampZENFirstTxConnector),
    TimestampZENLastRxConnector = todatetime(ParsedData.TimestampZENLastRxConnector),
    TimestampZENLastTxConnector = todatetime(ParsedData.TimestampZENLastTxConnector),
    ZENTotalBytesRxClient = toint(ParsedData.ZENTotalBytesRxClient),
    ZENBytesRxClient = toint(ParsedData.ZENBytesRxClient),
    ZENTotalBytesTxClient = toint(ParsedData.ZENTotalBytesTxClient),
    ZENBytesTxClient = toint(ParsedData.ZENBytesTxClient),
    ZENTotalBytesRxConnector = toint(ParsedData.ZENTotalBytesRxConnector),
    ZENBytesRxConnector = toint(ParsedData.ZENBytesRxConnector),
    ZENTotalBytesTxConnector = toint(ParsedData.ZENTotalBytesTxConnector),
    ZENBytesTxConnector = toint(ParsedData.ZENBytesTxConnector),
    Idp = tostring(ParsedData.Idp),
    ClientToClient = tostring(ParsedData.ClientToClient),
    ClientCity = tostring(ParsedData.ClientCity),
    MicroTenantID = tostring(ParsedData.MicroTenantID),
    AppMicroTenantID = tostring(ParsedData.AppMicroTenantID),
    Message = Message;